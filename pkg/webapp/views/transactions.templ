package views

import (
    "github.com/fitz123/mcduck-wallet/pkg/models"
    "fmt"
    "math"
)

templ TransactionHistory(transactions []models.TransactionJSON) {
    @showBackButton()
    @historyStyles()

    <div class="container">
        <h2>Transaction History</h2>
        for _, t := range transactions {
            @transactionItem(t)
        }
    </div>
}

templ showBackButton() {
    <script>
    let tg = window.Telegram.WebApp;
    tg.BackButton.show();
    tg.BackButton.onClick(() => {
        window.location.href = "/";
    });
    </script>
}

templ historyStyles() {
    <style>
        .transaction {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: var(--card-background);
            border-radius: var(--border-radius);
            padding: 20px;
            margin-bottom: 15px;
            box-shadow: var(--box-shadow);
            transition:
                transform 0.2s ease,
                box-shadow 0.2s ease;
        }

        .transaction:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
        }

        .left-content {
            display: flex;
            flex-direction: column;
        }

        .description {
            font-weight: 500;
            color: var(--text-color);
            font-size: 20px;
            margin-bottom: 5px;
        }

        .timestamp {
            color: var(--text-muted-color);
            font-size: 17px;
        }

        .amount {
            font-weight: 500;
            font-size: 24px;
            text-align: right;
            margin-top: 7px;
        }

        .received {
            color: var(--success-color);
        }

        .sent {
            color: var(--error-color);
        }

        .transaction-type {
            color: var(--text-muted-color);
            font-size: 18px;
            text-align: right;
        }
    </style>
}

templ transactionItem(t models.TransactionJSON) {
    <div class="transaction">
        <div class="left-content">
            <div class="description">
                if t.Amount < 0 {
                    To { truncateUsername(t.ToUsername) }
                } else {
                    From { truncateUsername(t.ToUsername) }
                }
            </div>
            <div class="timestamp">{ t.Timestamp.Format("2 Jan, 3:04 PM") }</div>
        </div>
        <div class="right-content">
            <div class={ "amount", ternary(t.Amount >= 0, "received", "sent") }>
            { ternary(t.Amount >= 0, "+", "-") }{ fmt.Sprintf("%.0f", math.Abs(t.Amount)) }
            </div>
        </div>
    </div>
}

func truncateUsername(username string) string {
    maxLength := 18
    if len(username) > maxLength {
        return username[:maxLength-3] + "..."
    }
    return username
}

func ternary(condition bool, trueVal, falseVal string) string {
    if condition {
        return trueVal
    }
    return falseVal
}
