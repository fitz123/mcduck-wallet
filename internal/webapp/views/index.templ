package views

import "github.com/fitz123/mcduck-wallet/internal/database"

templ head() {
	<head>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<title>McDuck Wallet WebApp</title>
		<meta name="color-scheme" content="light dark"/>
		<link
			rel="stylesheet"
			href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.classless.pink.min.css"
		/>
		<script src="https://unpkg.com/htmx.org@2.0.2" integrity="sha384-Y7hw+L/jvKeWIRRkqWYfPcvVxHzVzn5REgzbawhxAuQGwX1XWe70vji+VSeHOThJ" crossorigin="anonymous"></script>
		<script src="https://telegram.org/js/telegram-web-app.js"></script>
	</head>
}

templ style() {
	<style>
         /* Use Pico CSS variables for success and error text colors */
         .text-success {
             color: var(--pico-ins-color); /* Greenish color for positive amounts */
             background-color: var(--pico-ins-background)
         }
         .text-error {
             color: var(--pico-del-color); /* Reddish color for negative amounts */
             background-color: var(--pico-del-background)
         }
    </style>
}

templ tgInit() {
	<script>
    document.addEventListener('DOMContentLoaded', () => {
        let tg = window.Telegram.WebApp;
        tg.expand();

        // Set the color scheme to match the user's theme
        const theme = tg.colorScheme; // "light" or "dark"
        document.documentElement.setAttribute('data-theme', theme);

        // Add the Telegram initData to the request as a header
        htmx.on("htmx:configRequest", (e) => {
            e.detail.headers["X-Telegram-Init-Data"] = tg.initData;
        });

        // Initial load of authenticated content
        htmx.ajax('GET', '/dashboard', {target: 'body', swap: 'innerHTML'});

        tg.ready();

        // Set up back button handler once
        tg.BackButton.onClick(() => {
            htmx.ajax('GET', '/dashboard', {target: 'body', swap: 'innerHTML'});
        });

        // Function to update the back button based on the current page
        function updateBackButton() {
            const mainElement = document.querySelector('main');
            if (mainElement) {
                const page = mainElement.getAttribute('data-page');
                if (page === 'main') {
                    tg.BackButton.hide();
                } else {
                    tg.BackButton.show();
                }
            }
        }

        // Initial check
        updateBackButton();

        // Update back button after each content swap
        htmx.on('htmx:afterSwap', () => {
            updateBackButton();
        });
    });
    </script>
}

templ InitialLoadingIndex() {
	<!DOCTYPE html>
	<html lang="en">
		@head()
		@tgInit()
		@style()
		<body>
			<main data-page="main"></main>
		</body>
	</html>
}

templ MainContent(user *database.User, alertMessage string, isSuccess bool) {
	<main data-page="main">
		<header>
			// greet username by user.Name
			<h2>Welcome { user.Username }!</h2>
		</header>
		<section id="balance-container">
			@Balances(user.Accounts)
		</section>
		if alertMessage != "" {
			@alert(alertMessage, isSuccess)
		}
		<footer>
			<nav>
				<ul>
					<li><button hx-get="/transfer-form" hx-target="body">Money Transfer</button></li>
					<li><button hx-get="/history" hx-target="body">Transaction History</button></li>
					<li><button hx-get="/add-currency-form" hx-target="body">Add Currency</button></li> <!-- New link -->
				</ul>
			</nav>
		</footer>
	</main>
}

templ alert(message string, isSuccess bool) {
	<mark class={ ternary(isSuccess, "text-success", "text-error") }>{ message }</mark>
}
